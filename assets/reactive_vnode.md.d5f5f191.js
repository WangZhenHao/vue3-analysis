import{_ as s,c as n,o as a,N as p}from"./chunks/framework.7c29c9c7.js";const F=JSON.parse('{"title":"如何产生vnode？","description":"","frontmatter":{},"headers":[],"relativePath":"reactive/vnode.md"}'),l={name:"reactive/vnode.md"},o=p(`<h1 id="如何产生vnode" tabindex="-1">如何产生vnode？ <a class="header-anchor" href="#如何产生vnode" aria-label="Permalink to &quot;如何产生vnode？&quot;">​</a></h1><ol><li><p>执行<code>app.mount(&#39;#app&#39;)</code>, 在packages\\runtime-core\\src\\apiCreateApp.ts 的createAppAPI函数，执行<code>.mount(xx)</code>,会执行到 <code>render(vnode, rootContainer, isSVG)</code>, render就是生成vnode，并且渲染vnode成为正式dom的函数</p></li><li><p>render函数在packages\\runtime-core\\src\\renderer.ts 里面，vnode和渲染就是在这个函数开始</p></li></ol><p>2-1. 接着执行<code>patch(container._vnode || null, vnode, container, null, null, null, isSVG)</code></p><ul><li><p>第一个参数是新vnode, 第二个参数是旧的vnode, 第三个参数是节点对象（类似<code>document.querySelector(&#39;#app&#39;)</code>）</p></li><li><p>判断vnode类型<code>shapeFlag &amp; ShapeFlags.ELEMENT</code>, 相同的值，判断为true执行：</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">processComponent</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">   n1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   n2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   container</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   anchor</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   parentComponent</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   parentSuspense</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   isSVG</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   slotScopeIds</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   optimized</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#82AAFF;">mountComponent</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">   n2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   container</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   anchor</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   parentComponent</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   parentSuspense</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   isSVG</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   optimized</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>由于是第一次渲染，所以执行<code>mountComponent</code>方法</p><ol start="3"><li><code>mountCompoent</code>执行两个很重要方法</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">(__COMPAT__ </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> compatMountInstance)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">__DEV__</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">startMeasure</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">init</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setupComponent</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">instance</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">__DEV__</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">endMeasure</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">init</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setupRenderEffect</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    instance</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    initialVNode</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    anchor</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    parentSuspense</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    isSVG</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    optimized</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><ul><li><p><code>setupComponent(instatnce)</code>packages\\runtime-core\\src\\component.ts处理data响应式,methods,props，setup等参数，也是render函数生成的地方 <code>finishComponentSetup(instance, isSSR)</code>-&gt; <code>Component.render = compile(template, finalCompilerOptions)</code></p></li><li><p>其中<code>finishComponentSetup</code>函数,对ctx进行处理，是的实例在执行render函数的时候可以访问data, methods等等， RuntimeCompiledPublicInstanceProxyHandlers 函数定一个了set,get,has方式，用于对变量的预处理</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (installWithProxy) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">installWithProxy</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">instance</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">withProxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(i</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RuntimeCompiledPublicInstanceProxyHandlers)</span></span>
<span class="line"></span></code></pre></div><ul><li><code>setupComponent</code>做好了所有的准备工作，接着就是执行<code>setupRenderEffect</code></li></ul><p>3-1. <code>setupRenderEffect</code>可以说生成渲染函数的函数，<code>ReactiveEffect</code>对象就是渲染函数，data对象的属性搜集依赖 也就是收集<code>effct</code>函数实例，接着执行<code>effct.run()</code>,生成vnode,渲染真实dom的工作开始</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> effect </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">effect </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ReactiveEffect</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    componentUpdateFn</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">queueJob</span><span style="color:#A6ACCD;">(update)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scope </span><span style="color:#676E95;font-style:italic;">// track it in component&#39;s effect scope</span></span>
<span class="line"><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span></code></pre></div><ul><li><code>componentUpdateFn</code>函数，主要执行生成vnode, 渲染真实dom</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> subTree </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">subTree </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">renderComponentRoot</span><span style="color:#A6ACCD;">(instance))</span></span>
<span class="line"><span style="color:#89DDFF;">-&gt;</span></span>
<span class="line"><span style="color:#82AAFF;">patch</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#A6ACCD;">    subTree</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    anchor</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    instance</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    parentSuspense</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    isSVG</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><ul><li><p><code>renderComponentRoot(instance)</code>生成的虚拟节点有children， dynamicChildren这两个重要参数</p></li><li><p>下划线<code>_</code>定义的变量有硬性要求</p></li></ul>`,16),e=[o];function c(t,r,i,D,y,C){return a(),n("div",null,e)}const d=s(l,[["render",c]]);export{F as __pageData,d as default};
